 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
        Hay 954 paquetes.
 ** ¿Cuánto tiempo dura la captura?
        56.149345 segundos.
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
        192.168.1.34 Es una IP privada por estár en el rango de redes de la clase C según RFC 1918.

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
        UDP es mucho mayor. Si dado que UDP es una version simplificada de TCP y se transmite más rápido.
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
        Se observan ICMP, HTTP, DNS, SIP, CLASSIC-STUN, RTP, RTCP, y ARP.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
        En los segundos 7, 14, 16, 38, 39 y 55 aproximadamente.
 ** Y los paquetes con RTP, ¿cuándo se envían?
        Se envian del segundo 17 al segundo 38 de forma continuada excepto en el segundo 22.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
        Se emplea el protocolo DNS.
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
        La dirección IP es 80.58.61.250 .
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
        La dirección 86.64.162.35 .
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
        Ocurre una petición inversa, es decir, el usuario pide la el nombre al servidor dandole la IP.

6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
        Está pidiendo la del sitio http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
        Pide el user agent de Ekiga
 ** ¿Qué devuelve el servidor?
        La IP 83.36.48.212
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
        Recibimos 193.147.49.122 es decir nuestra IP, por lo tanto sabemos que el cliente pide al servidor su propia IP.

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
        STUN es un protocolo de red de tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el   puerto y el tipo de NAT. Se necesita la información para configurar una comunicación UDP entre dos hosts que se encuentren detras de router NAT.
 ** ¿Estamos tras un NAT?
        Sí, como se explica en el apartado anterior y que a su vez está especificado en RFC 5389.

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
        La IP del servidor es 86.64.162.35 .
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
        Al puerto 5060.
 ** ¿Qué método SIP utiliza el UA para registrarse?
        El método REGISTER.
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
        Entiende INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE además de REGISTER.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
        No, serán necesarios dos REGISTER. El primero será fallido y el servidor responderá con una clave que el cliente deberá transformar y enviar al servidor según unos parametros acordados. Si coincide con los calculos del servidor le registrará la segunda vez.
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
        El cliente ha preguntado por DNS si el servidor le tiene guardado, pero no es así.
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
        El segundo contiene la clave, el campo AUTHORIZATION para registrarse correctamente.
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
        La sesión expirará en 3600 SEGUNDOS.

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
        Correcto, puede verse de tal modo que el sujeto es Gregorio Robles y su dirección sip es grex@ekiga.net
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
        Tenemos el mensaje en SDP con informacion sobre el creador de la sesión, sobre la conexion, sobre el tiempo, sobre el contenido (audio y video)...etc
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
        No. En el primer intento falta el campo Proxy-Authorization. El servidor le envia la clave y el cliente construye el campo con la clave.
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
        El segundo mensaje INVITE tiene el campo Proxy-Authorization construido con la clave que el servidor le da al cliente.

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
        Se utiliza SIP para establecer la conexion con el servidor de DNS y una vez que dicho servidor le facilita la direccion del otro locutor establecen sesion entre ambos con SIP de nuevo. El intercambio de mensajes se produce con H.261 y RTP.
 ** ¿Cuál es el tamaño de paquete de los mismos?
        SIP ocupa 615, 883 y 799 bytes en los 3 paquetes. DNS 82, 157, 90 y 147 bytes. H.216 ocupa aproximadamente 1070 bytes salvo algunos que ocupan menos (200-400) bytes. RTP ocupa 214 bytes en todos de los casos.
 ** ¿Se utilizan bits de padding?
        No, aparece FALSE.
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
        Cada 0.02 segundos aproximadamente
 ** ¿Cuántos bits/segundo estamos enviando?
        Aproximadamente 135.68 Kbps
 

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
        Hay un total de 2 para el audio y para el video solo de ida
 ** ¿Cuántos paquetes se pierden?
        No se pierde ninguno
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
        El valor máximo de la delta es 1290.44 ms y es la diferencia de tiempo con el paquete que se envió previamente.
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
        El jitter medio es 42.5 ms y máximo 119.64 ms. Es un retardo muy pequeño por lo tanto podria decirse que estamos ante una conversacion de calidad.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
        Delta vale 0 ms y el jitter lo mismo
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
        Claro es el único con esos valores
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
        Hasta el número 247 donde vale 38.82 ms
 ** ¿A qué se debe el cambio tan brusco del jitter?
        La delta pasa a valer 554.74 ms por lo tanto hay un retraso en la transmisión.
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
        Si porque Delta y jitter están relacionados.
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
        El jitter mide la varianza de todos los tiempos de llegada y el delta la diferencia entre dos consecutivos.

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
        Dura 21 segundos
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
        Tenemos dos uno para el audio y otro para el video (0xBF4AFD37, 0x43306582 respectvamente). No hay CSRCs

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
        BYE
 ** ¿En qué trama(s)?
        En el segundo 38.119195 el cliente envia el primer BYE
 ** ¿Por qué crees que se envía varias veces?
        Envia 4 BYE porque usamos el protocolo SIP y al finalizar la sesion envia varias veces la trama por si se pierde sin esperar al primer asentimiento

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
        El cliente debe enviar un REGISTER con la clave del servidor y el campo EXPIRES a 0
 ** ¿En qué trama sucede esto?
        El primer REGISTER para irse en 950 y el segundo con la clave correcta en el 952
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
        Este REGISTER posee el campo a 0 para notificar al servidor que se quiere dar de baja de la sesión.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
        Si, para conseguir la direccion del usuario al que llamamos
 ** ¿Son diferentes el registro y la descripción de la sesión?
        El registro y la descripcion sí, tambien necesitamos 2 REGISTER, el segundo con la clave autorizada.
        Al finalizar la sesion no hay REGISTER con EXPIRES a 0 hay un BYE

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
        2 en ambos casos. En sip.cap hay audio y video de ida pero en la mia hay audio de ida y vuelta.
 ** ¿Cuál es su periodicidad?
        En ambas capturas cada 20 ms aproximadamente.
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
        En mi captura: max delta envio 20.89 ms, max delta de recepción 20.49, jitter medio envio 0.18ms jitter medio recepción 0.21ms, jitter máximo envio 0.22ms y jitter máximo recepción 0.26ms.
        En sip.cap: max delta audio 1290.44 ms, max delta de video 1290.48, jitter medio audio 0.18ms jitter medio video 0.21ms, jitter máximo audio 119.64ms y jitter máximo video 183.10ms.
        
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
        Si. Entrando en Telephony VoIP Calls, seleccionando pulsando play y seleccionando la pista a decodificar el buffer y reproducir.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
        Recibe la llamada y envia audio durante unos 2 segundos.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
